// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	versionInfoFieldNames          = builder.RawFieldNames(&VersionInfo{})
	versionInfoRows                = strings.Join(versionInfoFieldNames, ",")
	versionInfoRowsExpectAutoSet   = strings.Join(stringx.Remove(versionInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	versionInfoRowsWithPlaceHolder = strings.Join(stringx.Remove(versionInfoFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheVersionInfoIdPrefix      = "cache:versionInfo:id:"
	cacheVersionInfoVersionPrefix = "cache:versionInfo:version:"
)

type (
	versionInfoModel interface {
		Insert(ctx context.Context, data *VersionInfo) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*VersionInfo, error)
		FindOneByVersion(ctx context.Context, version string) (*VersionInfo, error)
		Update(ctx context.Context, data *VersionInfo) error
		Delete(ctx context.Context, id int64) error
	}

	defaultVersionInfoModel struct {
		sqlc.CachedConn
		table string
	}

	VersionInfo struct {
		Id          int64     `db:"id"`
		FileId      int64     `db:"file_id"`
		Version     string    `db:"version"`
		BaseVersion string    `db:"base_version"`
		CreateAt    time.Time `db:"create_at"`
		UpdatedAt   time.Time `db:"updated_at"`
	}
)

func newVersionInfoModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultVersionInfoModel {
	return &defaultVersionInfoModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`version_info`",
	}
}

func (m *defaultVersionInfoModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	versionInfoIdKey := fmt.Sprintf("%s%v", cacheVersionInfoIdPrefix, id)
	versionInfoVersionKey := fmt.Sprintf("%s%v", cacheVersionInfoVersionPrefix, data.Version)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, versionInfoIdKey, versionInfoVersionKey)
	return err
}

func (m *defaultVersionInfoModel) FindOne(ctx context.Context, id int64) (*VersionInfo, error) {
	versionInfoIdKey := fmt.Sprintf("%s%v", cacheVersionInfoIdPrefix, id)
	var resp VersionInfo
	err := m.QueryRowCtx(ctx, &resp, versionInfoIdKey, func(ctx context.Context, conn sqlx.SqlConn, v any) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", versionInfoRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVersionInfoModel) FindOneByVersion(ctx context.Context, version string) (*VersionInfo, error) {
	versionInfoVersionKey := fmt.Sprintf("%s%v", cacheVersionInfoVersionPrefix, version)
	var resp VersionInfo
	err := m.QueryRowIndexCtx(ctx, &resp, versionInfoVersionKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v any) (i any, e error) {
		query := fmt.Sprintf("select %s from %s where `version` = ? limit 1", versionInfoRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, version); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultVersionInfoModel) Insert(ctx context.Context, data *VersionInfo) (sql.Result, error) {
	versionInfoIdKey := fmt.Sprintf("%s%v", cacheVersionInfoIdPrefix, data.Id)
	versionInfoVersionKey := fmt.Sprintf("%s%v", cacheVersionInfoVersionPrefix, data.Version)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, versionInfoRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.FileId, data.Version, data.BaseVersion)
	}, versionInfoIdKey, versionInfoVersionKey)
	return ret, err
}

func (m *defaultVersionInfoModel) Update(ctx context.Context, newData *VersionInfo) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	versionInfoIdKey := fmt.Sprintf("%s%v", cacheVersionInfoIdPrefix, data.Id)
	versionInfoVersionKey := fmt.Sprintf("%s%v", cacheVersionInfoVersionPrefix, data.Version)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, versionInfoRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.FileId, newData.Version, newData.BaseVersion, newData.Id)
	}, versionInfoIdKey, versionInfoVersionKey)
	return err
}

func (m *defaultVersionInfoModel) formatPrimary(primary any) string {
	return fmt.Sprintf("%s%v", cacheVersionInfoIdPrefix, primary)
}

func (m *defaultVersionInfoModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary any) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", versionInfoRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultVersionInfoModel) tableName() string {
	return m.table
}
